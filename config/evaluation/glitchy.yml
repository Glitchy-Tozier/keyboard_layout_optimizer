metrics:
  # layout metrics

  # Specified symbols shall be located within the leftmost "n" columns of the left hand
  shortcut_keys:
    enabled: true
    weight: 4.0
    normalization:
      type: fixed
      value: 1.0
    params:
      # symbols that shall be considered "shortcut keys"
      shortcut_chars: cvxz
      cost: 1.0
      within_n_leftmost_cols: 5

  # Pairs of keys that shall be placed in related positions to each other
  similar_letters:
    enabled: true
    weight: 3.0
    normalization:
      type: fixed
      value: 1.0
    params:
      letter_pairs_ratings:
        # The cost for not complying with any of the criteria is 1.0
        - same_key_cost: 0.0
          neighboring_cost: 0.0
          same_column_cost: 0.0
          symmetric_cost: 0.4
          letter_pairs:
            # List of pairs of letters that shall be placed in related positions to each other
            # Diacritics
            - ["a", "ä"]
            - ["o", "ö"]
            - ["u", "ü"]
        - same_key_cost: 0.7
          neighboring_cost: 0.7
          same_column_cost: 0.9
          symmetric_cost: 0.8
          letter_pairs:
            # Similar letters
            - ["g", "k"]
            - ["p", "b"]
            - ["d", "t"]
            - ["m", "n"]
        - same_key_cost: 1.0
          neighboring_cost: 0.7
          same_column_cost: 1.0
          symmetric_cost: 0.7
          letter_pairs:
            # Related shortcut-letters
            - ["c", "v"]
            - ["x", "v"]
            - ["z", "y"]

  # Symbols of specified groups shall have the same relative location to each others.
  # Used to be called `asymmetric_keys`.
  similar_letter_groups:
    enabled: true
    weight: 10.0
    normalization:
      type: fixed
      value: 1.0
    params:
      # List of pairs of symbol groups for which the keys shall have the same relative position
      # e.g. ["auo", "äüö"] means that the relative location of a -> ä shall be identical to u -> ü
      # and o -> ö. Otherwise, a cost is counted.
      letter_group_pairs:
        - ["auo", "äüö"]
        # - ["auo", "äüö"]
        # - ["gbd", "kpt"]
        # - ["gbdw", "kptf"]
        # - ["sfdn", "tpbm"]

  # unigram metrics

  # Each finger's load shall be relative to the specified weights
  finger_balance:
    enabled: true
    weight: 69.0
    normalization:
      type: fixed
      value: 1.0
    params:
      # Intended factors for finger load. Thumb values are ignored.
      intended_loads:
        [Left, Pinky]: 1.0
        [Left, Ring]: 1.6
        [Left, Middle]: 2.0
        [Left, Pointer]: 2.0
        [Left, Thumb]: 2.0
        [Right, Thumb]: 2.0
        [Right, Pointer]: 2.0
        [Right, Middle]: 2.0
        [Right, Ring]: 1.6
        [Right, Pinky]: 1.0

  # Each hand's load shall be close to 50%
  hand_disbalance:
    enabled: true
    weight: 40.0
    normalization:
      type: fixed
      value: 1.0
    params:
      null: null

  # Each keystroke incurs a cost (defined in the keyboard's layout config)
  key_costs:
    enabled: true
    weight: 7.55
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  # Informational metric computing loads per row
  row_loads:
    enabled: true
    weight: 0.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  # bigram metrics

  # If the keys corresponding to a bigram are not symmetrical on left and right hand, a cost is
  # counted.
  symmetric_handswitches:
    enabled: true
    weight: 1.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  # If both keys corresponding to a bigram belong to the same finger, a cost is counted.
  # No cost incurs, if it is the same key. Such repeats are weighted with an additional
  # factor, if the index or pinky finger is involved.
  # Bigrams that appear often (more than a specified share of the total number of bigrams) are
  # weighted with an additional factor.
  finger_repeats:
    enabled: true
    weight: 780.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Costs of repeats with the index finger are multiplied with this factor
      index_finger_factor: 0.9
      # Costs of repeats with the pinky finger are multiplied with this factor
      pinky_finger_factor: 1.2
      # Increase finger repeats with unbalancing keys by the unbalancing value with this weight
      unbalancing_factor: 0.0
      # Common bigrams are weighted additionally only if their absolute weight exceeds this
      # threshold
      total_weight_threshold: 20
      # Common bigrams are weighted additionally only if their relative weight exceeds this
      # fraction
      critical_fraction: 1.00025 # >1 -> do not use
      # Common bigrams are weighted additionally by this factor
      factor: 5.0

  # If both keys corresponding to a bigram belong to the same finger AND are more than one row
  # apart vertically, a cost is counted depending on their vertical distance.
  # Bigrams that appear often (more than a specified share of the total number of bigrams) are
  # weighted with an additional factor.
  finger_repeats_top_bottom:
    enabled: true
    weight: 1850.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Costs of repeats with the index finger are multiplied with this factor
      index_finger_factor: 0.9
      # Costs of repeats with the pinky finger are multiplied with this factor
      pinky_finger_factor: 1.2
      # Increase finger repeats with unbalancing keys by the unbalancing value with this weight
      unbalancing_factor: 0.0
      # Common bigrams are weighted additionally only if their absolute weight exceeds this
      # threshold
      total_weight_threshold: 20
      # Common bigrams are weighted additionally only if their relative weight exceeds this
      # fraction
      critical_fraction: 1.00025 # >1 -> do not use
      # Common bigrams are weighted additionally by this factor
      factor: 5.0

  # If both keys corresponding to a bigram belong to the same finger AND belong to the same row,
  # a cost is counted.
  # No cost incurs, if it is the same key. Such repeats are weighted with an additional
  finger_repeats_lateral:
    enabled: true
    weight: 780.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Increase finger repeats with unbalancing keys by the unbalancing value with this weight
      unbalancing_factor: 1.0

  # If the keys corresponding to a bigram belong to fingers of the same hand, a cost is counted
  # depending on their vertical and horizontal distance. Depending on the direction of movement and
  # "length" of the involved fingers, additional factors may be involved.
  line_changes:
    enabled: true
    weight: 5.5
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Finger lengths
      finger_lengths:
        Left:
          Pinky: 1
          Ring: 2
          Middle: 3
          Pointer: 2
        Right:
          Pinky: 1
          Ring: 2
          Middle: 3
          Pointer: 2
      # If the movement is directed upwards from a short towards a long
      # or downwards from a long towards a short finger,
      # the cost is reduced by this factor
      short_up_to_long_or_long_down_to_short_reduction: 0.25
      # If the movement is directed downwards from a short towards a long
      # or upwards from a long towards a short finger,
      # the cost is increased by this factor
      short_down_to_long_or_long_up_to_short_increase: 0.5
      # Whether also bigrams involving both hands shall be considered
      count_row_changes_between_hands: false

  # Put costs on some key combinations that are hard to describe otherwise
  manual_bigram_penalty:
    enabled: true
    weight: 2100.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # key positions as matrix positions and the corresponding costs
      # the format is [column, row]
      # [from_position, to_position]: weight
      matrix_positions:
        # symmetric ones will be added automatically
        # NOTE: in contrast to ArneBab's layout, we skip one column in rows 0, 1, 2 (not in row 3)
        [[3, 1], [2, 3]]: 1      # QWERTZ: wy
        [[3, 2], [2, 3]]: 0.3    # QWERTZ: sy
        [[4, 2], [3, 3]]: 0.2    # QWERTZ: dx
        [[2, 1], [3, 3]]: 0.2    # QWERTZ: qx
        [[2, 1], [4, 3]]: 0.1    # QWERTZ: qc

        [[17, 3], [13, 1]]: 0.1   # QWERTZ: -z
        [[2, 3], [6, 1]]: 0.1    # QWERTZ: yt

        [[2, 3], [5, 3]]: -0.01  # QWERTZ: yv
        [[14, 3], [17, 3]]: -0.01 # QWERTZ: m-

        # Finger repeats on same key
        # pinkies
        [[2, 1], [2, 1]]: 0.5
        [[2, 2], [2, 2]]: 0.3
        [[2, 3], [2, 3]]: 0.5
        [[17, 1], [17, 1]]: 0.5
        [[17, 2], [17, 2]]: 0.3
        [[17, 3], [17, 3]]: 0.5

  # Depending on which fingers of the same hand are used to hit the keys of a bigram, costs are
  # counted.
  movement_pattern:
    enabled: true
    weight: 100.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # reduce costs by this factor if both symbols of the bigram are on the same row
      # the factor is given per row
      # (first element corresponds to row with matrix_position 0, usually number row)
      same_row_reduction_factor: [0, 0.6, 0.8, 0]

      # from: Finger for first symbol of the bigram
      # to: Finger for second symbol of the bigram
      # cost: Cost to count for such a movement
      finger_switch_costs:
        - { from: [Left, Pinky],   to: [Left, Ring],    cost: 8 }
        - { from: [Left, Pinky],   to: [Left, Middle],  cost: 2 }

        - { from: [Left, Ring],    to: [Left, Pinky],   cost: 12 }
        - { from: [Left, Ring],    to: [Left, Middle],  cost: 6 }
        - { from: [Left, Ring],    to: [Left, Pointer], cost: 0.1 }

        - { from: [Left, Middle],  to: [Left, Pinky],   cost: 3 }
        - { from: [Left, Middle],  to: [Left, Ring],    cost: 9 }
        - { from: [Left, Middle],  to: [Left, Pointer], cost: 0.6 }

        - { from: [Left, Pointer], to: [Left, Pinky],   cost: 0.1 }
        - { from: [Left, Pointer], to: [Left, Ring],    cost: 0.3 }
        - { from: [Left, Pointer], to: [Left, Middle],  cost: 0.9 }

        - { from: [Right, Pinky],   to: [Right, Ring],    cost: 8 }
        - { from: [Right, Pinky],   to: [Right, Middle],  cost: 2 }

        - { from: [Right, Ring],    to: [Right, Pinky],   cost: 12 }
        - { from: [Right, Ring],    to: [Right, Middle],  cost: 6 }
        - { from: [Right, Ring],    to: [Right, Pointer], cost: 0.1 }

        - { from: [Right, Middle],  to: [Right, Pinky],   cost: 3 }
        - { from: [Right, Middle],  to: [Right, Ring],    cost: 9 }
        - { from: [Right, Middle],  to: [Right, Pointer], cost: 0.6 }

        - { from: [Right, Pointer], to: [Right, Pinky],   cost: 0.1 }
        - { from: [Right, Pointer], to: [Right, Ring],    cost: 0.3 }
        - { from: [Right, Pointer], to: [Right, Middle],  cost: 0.9 }

  movement_pattern_same_row:
    enabled: true
    weight: 200.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      exclude_rows: [3]
      exclude_unbalancing: false
      exclude_lateral_finger_movement: true

      # from: Finger for first symbol of the bigram
      # to: Finger for second symbol of the bigram
      # cost: Factor to apply for such a movement
      finger_switch_costs:
        - { from: [Left, Pinky],   to: [Left, Ring],    cost: 0.1 }
        - { from: [Left, Pinky],   to: [Left, Middle],  cost: 0.5 }
        - { from: [Left, Pinky],   to: [Left, Pointer],  cost: 1 }

        - { from: [Left, Ring],    to: [Left, Pinky],   cost: 0 }
        - { from: [Left, Ring],    to: [Left, Middle],  cost: 0.4 }
        - { from: [Left, Ring],    to: [Left, Pointer], cost: 0.8 }

        - { from: [Left, Middle],  to: [Left, Pinky],   cost: 0.2 }
        - { from: [Left, Middle],  to: [Left, Ring],    cost: 0.1 }
        - { from: [Left, Middle],  to: [Left, Pointer], cost: 1.5 }

        - { from: [Left, Pointer], to: [Left, Pinky],   cost: 1 }
        - { from: [Left, Pointer], to: [Left, Ring],    cost: 1 }
        - { from: [Left, Pointer], to: [Left, Middle],  cost: 1.1 }

        - { from: [Right, Pinky],   to: [Right, Ring],    cost: 0.1 }
        - { from: [Right, Pinky],   to: [Right, Middle],  cost: 0.5 }
        - { from: [Right, Pinky],   to: [Right, Pointer],  cost: 1 }

        - { from: [Right, Ring],    to: [Right, Pinky],   cost: 0 }
        - { from: [Right, Ring],    to: [Right, Middle],  cost: 0.4 }
        - { from: [Right, Ring],    to: [Right, Pointer], cost: 0.8 }

        - { from: [Right, Middle],  to: [Right, Pinky],   cost: 0.2 }
        - { from: [Right, Middle],  to: [Right, Ring],    cost: 0.1 }
        - { from: [Right, Middle],  to: [Right, Pointer], cost: 1.5 }

        - { from: [Right, Pointer], to: [Right, Pinky],   cost: 1 }
        - { from: [Right, Pointer], to: [Right, Ring],    cost: 1 }
        - { from: [Right, Pointer], to: [Right, Middle],  cost: 1.1 }

  # If no handswitch occurs after hitting an "unbalancing" key (as defined in the keyboard's layout
  # config), a cost is counted. If the second key is unbalancing as well, an additional cost
  # depending on the distance to the first key is added.
  no_handswitch_after_unbalancing_key:
    enabled: true
    weight: 18.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Additional cost factor if the second key is also unbalancing
      unbalancing_after_unbalancing: 4

  # If (at least) one of the keys corresponding to a bigram is "unbalancing" (as defined in the
  # keyboard's layout config), a cost is counted based on their distance.
  unbalancing_after_neighboring:
    enabled: true
    weight: 200.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null


  # trigram metrics

  # The `irregularity` metric evaluates all bigram metrics that can be computed on individual
  # bigrams (in particular not the finger- and hand-balance metrics) for the first and second half
  # of each trigram. Their cost is multiplied and the square root of the resulting sum is taken.
  irregularity:
    enabled: true
    weight: 8.25
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  # If there is no handswitch in a trigram, a cost is counted. The cost is multiplied by factors
  # depending on whether the three keys corresponding to the trigram are "in line" ("rolling
  # movement") or if there is a directional change.
  no_handswitch_in_trigram:
    enabled: true
    weight: 650.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Count this factor if there is a direction change in the trigram
      factor_with_direction_change: 1.0
      # Count this factor if there is no direction change in the trigram
      factor_without_direction_change: 0.0

  # The `secondary_bigrams` metric evaluates all bigram metrics that can be computed on individual
  # bigrams (in particular not the finger- and hand-balance metrics) for the bigram resulting from
  # the first and last symbol of the trigram. Depending on whether the trigram involves a
  # handswitch or not, factors are applied. Trigrams starting with one of a list of specified
  # symbols are excluded.
  secondary_bigrams:
    enabled: true
    weight: 0.5
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Multiply the cost with this factor if no handswitch occurs in the trigram
      factor_no_handswitch: 0.7
      # Multiply the cost with this factor if a handswitch occurs in the trigram
      factor_handswitch: 0.8
      # Mental pauses:
      # Exclude the trirgrams which contain a mental pause and a follow up with a non-pause symbol.
      # These trigrams do not need to be optimized, because they're "designed" to contain a pause.
      # Mental pauses start with one of the defined `initial_pause_indicators` and then contain
      # some kind of whitespace.
      initial_pause_indicators: [",", "."]

  # If all keys corresponding to a trigram are hit by the same finger (and are all unequal), a cost
  # is counted. A factor is multiplied for each bigram with keys belonging to different columns.
  trigram_finger_repeats:
    enabled: true
    weight: 10000.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Multiply by this factor for each of the bigrams that have a lateral movement
      factor_lateral_movement: 1.2

  trigram_rolls:
    enabled: false
    weight: 25000.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Multiply by this factor for each of the bigrams that have a lateral movement
      factor_inward: 1.0
      factor_outward: 0.2
      exclude_rows: [3]

ngram_mapper:
  # Exclude ngrams that contain a line break, followed by a non-line-break character.
  # This encodes a mental pause which usually comes after hitting the "Enter" key, before
  # continuing to write.
  exclude_line_breaks: true

  # Split symbols belonging to higher layers of the layout into combinations involving modifiers
  # required to activate the layer
  split_modifiers:
    enabled: true
    # Multiply the ngram's weight with this factor whenever the resulting ngram involves two
    # modifiers that are required for the same symbol
    same_key_mod_factor: 0.03125

  # Add secondary bigrams from trigrams to the pool of bigrams. Secondary bigrams contain the first
  # and last key corresponding to a trigram.
  secondary_bigrams_from_trigrams:
    enabled: false
    # Multiply the bigram's weight with this factor, if the trigram involves no handswitch
    factor_no_handswitch: 0.7
    # Multiply the bigram's weight with this factor, if the trigram involves no handswitch
    factor_handswitch: 0.8
    # Mental pauses:
    # Exclude the trirgrams which contain a mental pause and a follow up with a non-pause symbol.
    # These trigrams do not need to be optimized, because they're "designed" to contain a pause.
    # Mental pauses start with one of the defined `initial_pause_indicators` and then contain
    # some kind of whitespace.
    initial_pause_indicators: [",", "."]

  # Increase the weight of bigrams that have both an absolute weight and relative weight exceed
  # specified thresholds.
  increase_common_bigrams:
    enabled: false
    # Bigrams with a relative weight exceeding this threshold are considered
    critical_fraction: 0.001
    # The weight for bigrams exceeding both thresholds is multiplied by this factor
    factor: 2.0
    # Bigrams with an absolute weight exceeding this threshold are considered
    total_weight_threshold: 20.0
